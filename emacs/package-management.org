#+TITLE: Package Management
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/lisp/package-management.el

Make this configuration available under name ~package-management~

#+begin_src emacs-lisp
  
  (provide 'package-management)
  
#+end_src

* Basic package management

Use basic package management functions

#+begin_src emacs-lisp
  
  (require 'package)
  
#+end_src

Define package archives

#+begin_src emacs-lisp

  (add-to-list 'package-archives '("stable" . "https://stable.melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  
#+end_src

Set package installation directory

#+begin_src emacs-lisp

;;  (setq package-user-dir "/usr/local/share/emacs/site-lisp/elpa/")

#+end_src

Initialize packages and refresh package list contents if no archive exists yet

#+begin_src emacs-lisp
    
  (package-initialize)
  
  (unless package-archive-contents
    (package-refresh-contents))
  
#+end_src

* Easier package management with use-package

** Configuration

Install it

#+begin_src emacs-lisp
  
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  
#+end_src

Load it

#+begin_src emacs-lisp
  
  (require 'use-package)
  
#+end_src

Make sure that if a package is called with use-package and it does not exist, it is downloaded automatically.
(Alternatively you could define ~:ensure t~ for each package individually.)

#+begin_src emacs-lisp
  
  (setq use-package-always-ensure t) ;; always download package if not exists
  (setq use-package-verbose t)       ;; show loaded packages in Message buffer
  
#+end_src


** Example usage of use-package

#+begin_src emacs-lisp :tangle no
  
  (use-package <package-name>
  
    :custom ;; set values of customizable variables
    (<variable> <value>)
    (<variable> <value>)
  
    :bind ;; define keybindings
    (("<key>" . <command>)
     ("<key>" . <command>)
     ([remap <command>] . <command>)) ;; remap keys
    :map <internal-map> ;; bind key to keymap of loaded package
    ("<key>" . <command>)
    ("<key>" . <command>)
  
    :bind-keymap ;; define keybindings for a specific keymap (except for the just loaded package, see :map above for that)
    ("<key>" . keymap)
  
    :init ;; executed before package is loaded
  
    :config ;; execute after package is loaded
  
    :hook ;; load this package when inside specific modes
    (<mode> <mode> ...)
  
    :commands (<command> <command> ...) ;; activate package when one of there commands is executed (= register an autoload for these functions)
    ;; Needed if autoload is not defined for this command inside the package.
  
    :diminish <package-name>-mode ;; hide mode from mode-line
  
    :after <package> ;; load this package after <package> is loaded
  
    :defer t ;; defer loading of package until a function of it is used (this function needs to be registered as an autoload)
    :defer 5 ;; defer loading until 5 seconds after emacs is idle after startup
  
    :demand ;; force loading at startup (overriding :bind or :mode or :commands for lazy loading)
    )
  
#+end_src

Usage of =:commands=, =:hook= and =:bind= imply =:defer t=
They all define an 'autoload': The autoload facility lets you register the existence of a function or macro, but put off loading the file that defines it.
(Autoload is not needed if it is defined inside the package in front of the function with a magic comment)

** Convert use-package definition into plain elisp
#+begin_src emacs-lisp :tangle no
  ;; install package
  (unless (package-installed-p 'name) (package-install 'name))
  (init)
  ;; load package
  (require 'name)
  (config)
#+end_src

*** Custom
#+begin_src emacs-lisp :tangle no
  (custom-set-variables '(variable1 value1) '(variable2 value2))
#+end_src

*** After
#+begin_src emacs-lisp :tangle no
  (with-eval-after-load after-package
    ;; init
    (require 'name)
    ;; config, custom, ...
  )
#+end_src

*** Commands
#+begin_src emacs-lisp :tangle no
  ;; if funcion is already defined, file is already loaded
  (unless (fboundp 'funcion-or-command)
    (autoload #'function-or-command "package" nil t))
    ;; t for the function to be a command
#+end_src
Then require expression is not needed because package is loaded whenever the command is called.
All other stuff needs to go into an =with-eval-after-load= block

*** Hooks
#+begin_src emacs-lisp :tangle no
  (add-hook 'existing-hook #'function-to-add)
#+end_src
Possibly add autoload and use =with-eval-after-load=

*** Defer t
Does not need a =require= because it implies that an autoload is generated for this function which requires the package automatically when this function is called.
Use =with-eval-after-load= for all other stuff

*** Defer 5
#+begin_src emacs-lisp :tangle no
  (run-with-idle-timer 5 nil #'require 'package)
#+end_src
Use =with-eval-after-load= for all other stuff

*** Bind
Just define keys normally.
Use before require to use keybinding to call an autoload function
Then possibly add autoload and use =with-eval-after-load=
