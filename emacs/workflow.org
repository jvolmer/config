#+TITLE: My workflow
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/lisp/workflow.el
#+PROPERTY: header-args :mkdirp yes

#+begin_src emacs-lisp
  
  (provide 'workflow)
  
#+end_src

All the packages included here are based on org-mode, defined [[file:documents.org::#org-mode][here]].

* Agenda

Manage your tasks and appointments


| Command         | Key       | Description                   |
|-----------------+-----------+-------------------------------|
| org-agenda      | C-c a (C) | Open agenda dispatcher        |
| org-agenda-list |           | Directly open agenda for week 

For each task or appointment entry (has to be a heading)

| Command          | Key       | Description                       |
|------------------+-----------+-----------------------------------|
| org-todo         | C-c C-t   | Toggle status                     |
|                  | (S-arrow) |                                   |
| org-schedule     | C-c C-s   | Schedule date (S- for nav)        |
| org-deadline     | C-c C-d   | Sets deadline (reminds you        |
|                  |           | org-deadline-warning-days before) |
| org-time-stamp   |           | Add timestamp                     |
| org-set-tags     | C-c C-q   | Add tags                          |
| org-set-property |           | Set a property                    |
| org-set-effort   |           | Set effort-property directly      |
| org-refile       |           | Refile                            |

Repeated date: e.g. every year <date +1y>

** File Location

Set agenda file locations (Filenames will show up in agenda-list)

#+begin_src emacs-lisp
    
    (with-eval-after-load 'org  
      (setq org-agenda-files
            '("~/docs/organization/tasks.org" "~/.org-jira/"))
      (setq org-refile-targets
            '(("archive.org" :maxlevel . 1))))
    
#+end_src

** Workflows

Define TODO states and  workflows (left of "|" are active states)

#+begin_src emacs-lisp
  
  (with-eval-after-load 'org
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANCELLED(k@)"))))
  
#+end_src

** Tags

#+begin_src emacs-lisp
  
  (with-eval-after-load 'org
    (setq org-tag-alist
          '((:startgroup)
            ;; put manually exclusive tags here
            (:endgroup)
            ("@home" . ?h)
            ("@work" . ?w)
            ("agenda" . ?a)
            ("planning" . ?p)))
    (setq org-agenda-tags-column 100))
  
#+end_src

** Views

Define different views that can be selected via org-agenda

#+begin_src emacs-lisp
  
  (with-eval-after-load 'org
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))
  
            ("n" "Next Tasks"
             ((todo "TODO"
                    ((org-agenda-overriding-header "Next Tasks")))))
  
            ("W" "Work Tasks" tags-todo "+work")
  
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("j" "Jira Board"
             ((todo "BACKLOG"
                    ((org-agenda-overriding-header "Backlog")
                     (org-agenda-todo-list-sublevels nil)))
                     ;; (org-agenda-files '("~/.org-jira/udf.org"))))
              (todo "TODO"
                    ((org-agenda-overriding-header "Todo")))
              (todo "IN PROGRESS"
                    ((org-agenda-overriding-header "In Progress")))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")))
              (todo "DONE"
                    ((org-agenda-overriding-header "Done")))
              (todo "ONHOLD"
                    ((org-agenda-overriding-header "On Hold")
                     (org-agenda-todo-list-sublevels nil))))))))
  
#+end_src

** Appearance

Window setup

#+begin_src emacs-lisp
  
  (with-eval-after-load 'org
    (setq org-agenda-window-setup 'only-window)
    (setq org-agenda-restore-windows-after-quit t))
  
#+end_src

Open agenda dispatcher in vertical split

#+begin_src emacs-lisp
  
  (with-eval-after-load 'org
    (defadvice org-agenda (around split-vertically activate)
      (let (
            (split-width-threshold 40)    ; or whatever width makes sense for you
            (split-height-threshold nil)) ; but never horizontally
        ad-do-it)))
  
#+end_src

** Behavior

Logging setup

#+begin_src emacs-lisp
  
  (with-eval-after-load 'org
    (setq org-agenda-start-with-log-mode t) ;; present log of a day
    (setq org-log-done 'time) ;; store time when log is done
    (setq org-log-into-drawer t)) ;; fold in collapsable drawer
  
#+end_src

Save org buffers after refiling

#+begin_src emacs-lisp
  
  (with-eval-after-load 'org
    (advice-add 'org-refile :after 'org-save-all-org-buffers))
  
#+end_src


** Habits

Shows habit tracker diagram for reoccuring tasks

#+begin_src emacs-lisp
  
  (with-eval-after-load 'org
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60))
  
#+end_src

property: style = habit

<date .+2d> every 2 days
<date .+2d/4d> every 4 days but not more than every 2 days

* Captures

Capure  stuff quickly in between your work.

#+begin_src emacs-lisp
  
  (with-eval-after-load 'org
    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry
             (file+olp "Tasks.org" "Inbox")
             ;; under heading Inbox
             "* TODO %?\n  %U\n  %a\n  %i"
             :empty-lines 1)
            ;; %? Where cursor is placed in the template (to write)
            ;; %U timestamp
            ;; %a link to current position in file
  
            ("j" "Journal Entries")
            ("jj" "Journal" entry
             ;; use datetree for heading hierarchy
             (file+olp+datetree "Journal.org")
             "\n* %<%I:cache yes%M %p> - Journal :journal:\n\n%?\n\n"
             :clock-in :cache yesclock-resume :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "Journal.org")-
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume :empty-lines 1)
  
            ("w" "Workflows")
            ("we" "Checking Email" entry
             (file+olp+datetree "Journal.org")
             "* Checking Email :email:\n\n%?"
             :clock-in :clock-resume :empty-lines 1)
  
            ("m" "Metrics Capture")
            ("mw" "Weight" table-line
             (file+headline "Metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |"
             ;; ask for Weight and Notes entries
             :kill-buffer t))))
  
#+end_src

Shortcut to journal capture

#+begin_src emacs-lisp :tangle no
  
  (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "jj")))
  
#+end_src

* Roam

Creating a personal knowledge base of interlinked nodes, including daily notes.

#+begin_src emacs-lisp
  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/docs/org-roam")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode))
#+end_src


