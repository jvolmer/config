#+TITLE: Customize keybindings
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/lisp/keybinding.el

#+begin_src emacs-lisp
  
  (provide 'keybinding)
  
#+end_src

* Help

#+begin_src emacs-lisp
    
    (use-package which-key
      :demand
      :diminish which-key-mode
      :custom (which-key-idle-delay 0.3)
      :init (which-key-mode))
    
#+end_src

| describe-personal-keybindings | see all personal bindings      |
| describe-mode                 | show current buffer modes      |
|                               | (including keys)               |
| describe-bindings             | show all bindings              |
| which-key-show-keymap         | show bindings of specified map |

* Set keybindings

Use ESCAPE for quitting everywhere

#+begin_src emacs-lisp
  
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

Set keybindings only in specific keymap (e.g. a mode)

#+begin_src emacs-lisp :tangle no
  
  (define-key <keymap> (kbd "<key>") '<command>)
  
#+end_src

* General package

Convenient method for binding keys, e.g. create your own leader-key and its menu

#+begin_src emacs-lisp
  
  (use-package general
      :demand)
  
  (general-create-definer me/leader-key
        :prefix "C-c")
  
  ;; make my own menu
  (me/leader-key
    "w" '(:ignore t :which-key "window")
    "wt" '(transpose-frame :which-key "transpose")
    "ws" '(:ignore t :which-key "size")
    "wsh" '(hydra-horizontal-window-size/body :which-key "horizontal")
    "wsv" '(hydra-vertical-window-size/body :which-key "vertical")
    "wsb" '(balance-windows :which-key "balance")
    "wss" '(shrink-window-if-larger-than-buffer :which-key "fit-to-size"))
  
#+end_src

Define keys (equivalent to ~global-set-key~)

#+begin_src emacs-lisp :tangle no
  
  (general-define-key
   "<key>" '<command>
   "<key>" '<command>)
  
#+end_src

Define keys in a specific keymap

#+begin_src emacs-lisp :tangle no
  
   (general-define-key
    :keymaps '<map>
    "<key>" '<command>)
  
   OR
  
   (general-define <map>
    "<key>" '<command>)
  
#+end_src

* Hydra

Tie related commands together into a family of short bindings that can be called easily successively

#+begin_src emacs-lisp
      
      (use-package hydra
        :defer)
      
#+end_src

Define hydras

#+begin_src emacs-lisp
  
  (defhydra hydra-horizontal-window-size ()
    "Scale window horizontally"
    ("k" shrink-window-horizontally "shrink")
    ("l" enlarge-window-horizontally "enlarge")
    ("q" nil "quit" :exit t))
  
  (defhydra hydra-vertical-window-size ()
    "Scale window vertically"
    ("k" (enlarge-window -1) "shrink")
    ("l" enlarge-window "enlarge")
    ("q" nil "quit" :exit t))
  
#+end_src

Entry point for the definitions is ~<hydra-name>/body~.
You can directly define a keybinding for each ~defhydra~ with ~(<keymap> "<key>")~ in the brackets.

* Behavior changes

#+begin_src emacs-lisp
  
  (use-package evil-nerd-commenter
    :bind ("M-;" . evilnc-comment-or-uncomment-lines))
  
#+end_src
