#+TITLE: Customize keybindings
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/lisp/keybinding.el

#+begin_src emacs-lisp
  
  (provide 'keybinding)
  
#+end_src

* Help

#+begin_src emacs-lisp
    
    (use-package which-key
      :demand
      :diminish which-key-mode
      :custom (which-key-idle-delay 0.3)
      :init (which-key-mode))
    
#+end_src

| describe-personal-keybindings | see all personal bindings      |
| describe-mode                 | show current buffer modes      |
|                               | (including keys)               |
| describe-bindings             | show all bindings              |
| which-key-show-keymap         | show bindings of specified map |

* Set keybindings

Use ESCAPE for quitting everywhere

#+begin_src emacs-lisp
  
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

Set keybindings only in specific keymap (e.g. a mode)

#+begin_src emacs-lisp :tangle no
  
  (define-key <keymap> (kbd "<key>") '<command>)
  
#+end_src

* General package

Convenient method for binding keys, e.g. create your own leader-key and its menu

#+begin_src emacs-lisp
  
  (use-package general
      :demand
      :config
      (general-evil-setup t)
      (general-create-definer me/leader-key
        :prefix "C-c"))
  
  ;; make my own menu
  (me/leader-key
    "w" '(:ignore t :which-key "window")
    "wt" '(transpose-frame :which-key "transpose")
    "ws" '(:ignore t :which-key "size")
    "wsh" '(hydra-horizontal-window-size/body :which-key "horizontal")
    "wsv" '(hydra-vertical-window-size/body :which-key "vertical")
    "wsb" '(balance-windows :which-key "balance")
    "wss" '(shrink-window-if-larger-than-buffer :which-key "fit-to-size"))
  
#+end_src

Define keys (equivalent to ~global-set-key~)

#+begin_src emacs-lisp :tangle no
  
  (general-define-key
   "<key>" '<command>
   "<key>" '<command>)
  
#+end_src

Define keys in a specific keymap

#+begin_src emacs-lisp :tangle no
  
   (general-define-key
    :keymaps '<map>
    "<key>" '<command>)
  
   OR
  
   (general-define <map>
    "<key>" '<command>)
  
#+end_src

* Hydra

Tie related commands together into a family of short bindings that can be called easily successively

#+begin_src emacs-lisp
      
      (use-package hydra
        :defer)
      
#+end_src

Define hydras

#+begin_src emacs-lisp
  
  (defhydra hydra-horizontal-window-size ()
    "Scale window horizontally"
    ("k" shrink-window-horizontally "shrink")
    ("l" enlarge-window-horizontally "enlarge")
    ("q" nil "quit" :exit t))
  
  (defhydra hydra-vertical-window-size ()
    "Scale window vertically"
    ("k" (enlarge-window -1) "shrink")
    ("l" enlarge-window "enlarge")
    ("q" nil "quit" :exit t))
  
#+end_src

Entry point for the definitions is ~<hydra-name>/body~.
You can directly define a keybinding for each ~defhydra~ with ~(<keymap> "<key>")~ in the brackets.

* Undo

Improved undo actions: undo and redo are clearly separated

#+begin_src emacs-lisp
    
  (use-package undo-fu)
    ;; :config
    ;; (global-unset-key (kbd "C-z"))
    ;; (global-set-key (kbd "C-z")   'undo-fu-only-undo)
    ;; (global-set-key (kbd "C-S-z") 'undo-fu-only-redo))
  
#+end_src

* Evil

#+begin_src emacs-lisp
  
  (defun me/start-some-modes-in-emacs-state ()
    "Add modes that start in emacs-state"
    (dolist (mode '(custom-mode
                    eshell-mode
                    dired-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))
  
  (use-package evil
    :init ;; following has to be set before evil is loaded
    (setq evil-undo-system 'undo-fu) ;; to make redo work properly
    (setq evil-want-integration t) ;; 
    (setq evil-want-keybinding nil) ;; use evil-collection instead
    (setq evil-want-C-u-scroll t) ;; use C-u for scrolling instead of
    (evil-mode 1)
    :config
    (general-define-key :states 'insert "C-g" 'evil-normal-state)
    (general-define-key :states 'insert "C-h" 'evil-delete-backward-char-and-join)
    (me/start-some-modes-in-emacs-state))
  
    ;; Use visual line motions even outside of visual-line-mode buffers
    ;; (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    ;; (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
  
#+end_src

Set-up evil keybindings for different modes
#+begin_src emacs-lisp
  
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
  
#+end_src
If having problems with evil in one of these modes, remove that mode from ~evil-collection-mode-list~

Change between emacs and vim keybindings (between emacs- and default-state) with ~C-z~

** Commands
| :qa! <ENTER>    | exit editor without saving changes       |
| :wqa <ENTER>    | exit with saving changes                 |
| :s/old/new/g    | change all occurences on line            |
|                 | (first occurence without g)              |
|                 | (gc: add. ask for confirmation each time |
| :#,#s/old/new/g | every occurence on lines # and #         |
| :%s/old/new/g   | change every occurence in buffer         |
| :!<command>     | execute any shell command                |
| :w <filename>   | write content of this file to filename   |
| :#,# w <name>   | write content between lines # to file    |
| :r <filename>   | insert content of file at cursor         |

All : commands must be finished by <ENTER>

** Keys
| < h    l > | left , right                     |
| v j  ^k    | down (j looks down), up          |
| S-SPC      | scroll window up                 |
| C-d        | scroll window down               |
| C-o        | jump to previous cursor position |
| C-i        | jump to next cursor position     |

*** Repetitions
| u   | undo                                   |
| C-u | redo                                   |
| .   | repeat last action at current position |

*** Motions
| w         | start of next word                           |
| e         | last letter of word                          |
| b         | back a word                                  |
| W         | next space (E without space)                 |
|           |                                              |
| 0         | start of line                                |
| \^        | first character in line                      |
| \$        | end of line                                  |
| j         | down one line                                |
| :<number> | line                                         |
|           |                                              |
| (         | backward a sentence                          |
| )         | forward a sentence                           |
|           |                                              |
| {         | start of paragraph                           |
| }         | end of paragraph                             |
|           |                                              |
| gg        | beginning of buffer                          |
| G         | end of buffer                                |
|           |                                              |
| %         | matching brancket                            |
| /<phrase> | search, again: n, opposite direction: N      |
| ?<phrase> | search backwards                             |
| f, F      | find next (previous) character               |
| t, T      | find next character (excluding new character |

*** Actions
| x    | Delete character under cursor         |
| i    | insert (goto insert)                  |
| p    | put last deletion after cursor        |
|      | (for a deleted line: under cursor)    |
| r    | replace character under cursor        |
| R    | replace more (goto insert)            |
| a    | append (start editing one character ahead) |
| [p   | paste in new line above               |
| ]p   | paste in new line below               |
| [SPC | add lines above                       |
| ]SPC | add lines below                       |
| [e   | move region/line up                   |
|      |                                       |
| o    | open line below this line goto insert |
| O    | open line above this line goto insert |
| A    | append to end of line                 |
| I    | insert at start of line               |

Combined actions:
[number] [verb] [noun] OR [verb] [number] [noun]

**** Verbs
| d | delete               |
| c | change (goto insert) |
| a | append (goto insert) |
| y | yank (copy)          |
| > | indent               |
| v | visually select      |

**** Noun
Can be motions (see above - operates from the current cursor position)
or text objects - operates on the whole object regardless of the cursor position:

| iw | inner word (works from anywhere inside word) |
| i  | inner quotes                                 |
| a" | a double quoted string (same for '`)         |
| i" | inner double quoted string                   |
| it | inner tag (xml/html)                         |
| as | a sencence                                   |
| i{ | inner nearest curly brackey (same for )]>)   |
| ip | inner paragraph                              |

defaults to next in line

a instead of i includes surrounding white spaces

For action on full line: press verb twice (e.g. dd to delete line)

** Advice
- in actions: use text objects instead of motions
- spelling: change entire word instead of correcting one character

* Behavior changes

** Comments
#+begin_src emacs-lisp
  
  (use-package evil-nerd-commenter
    :config (evilnc-default-hotkeys))
  
#+end_src

Evil-mode: ~,~ e.g. ~,ci~
All modes: ~M-;~

** Switch buffer
#+begin_src emacs-lisp
  
  (general-define-key
    "C-M-j" 'counsel-switch-buffer)
  
#+end_src
