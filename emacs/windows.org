#+TITLE: Window Management
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/lisp/windows.el
#+PROPERTY: header-args :mkdirp yes

#+begin_src emacs-lisp
  
  (provide 'windows)
  
#+end_src

* Windows

| split-window-below                  | C-x 2 | Split horizontally  |
| split-window-right                  | C-x 3 | Split vertically    |
|                                     |       |                     |
| delete-window                       | C-x 0 | Close current       |
| delete-other-window                 | C-x 1 | Close all other     |
|                                     |       |                     |
| shrink-window-horizontally          | C-x { |                     |
| enlarge-window-horizontally         | C-x } |                     |
| shrink-window                       |       | Vertically          |
| shrink-window-if-larger-than-buffer | C-x - | Vertically          |
| balance-windows                     | C-x + | Balance size of all |

** Other window

| other-window             | C-x o     | Select next visible |
|                          |           |                     |
| find-file-other-window   | C-x 4 f   | Open in other       |
| dired-other-window       | C-x 4 d   |                     |
| dired-jump-other-window  | C-x 4 C-j | At file location    |
|                          |           |                     |
| scroll-other-window      | M-pgdn    |                     |
|                          | C-M-v     |                     |
| scroll-other-window-down | M-pgup    |                     |
|                          | C-S-M-v   |                     

** Sizes

#+begin_src emacs-lisp
  (use-package transpose-frame)

  (me/leader-key
    "wt" 'transpose-frame
    "wsh" 'me/hydra-horizontal-window-size/body
    "wsv" 'me/hydra-vertical-window-size/body
    "wsb" 'balance-windows
    "wss" 'shrink-window-if-larger-than-buffer)

  (defhydra me/hydra-horizontal-window-size ()
    "Scale window horizontally"
    ("k" shrink-window-horizontally "shrink")
    ("l" enlarge-window-horizontally "enlarge")
    ("q" nil "quit" :exit t))
  
  (defhydra me/hydra-vertical-window-size ()
    "Scale window vertically"
    ("k" (enlarge-window -1) "shrink")
    ("l" enlarge-window "enlarge")
    ("q" nil "quit" :exit t))
 
#+end_src

** Select specific window

Shows number of window in modeline
 
#+begin_src emacs-lisp
  
  (use-package winum
    :config (winum-mode))
  
#+end_src

~C-x w <window number>~

Use ace-window to always choose a window by a number before doing an action (you use ace-window command, then choose the window, then choose the action, e.g. split horizontally)

** Window configuration
Move to window left/right/above/below: ~windmove-up/down/left/right~
Swap buffers in windows: ~windmove-swap-states-up/down/left/right~
#+begin_src emacs-lisp
  
  (windmove-default-keybindings 'meta)
  (windmove-swap-states-default-keybindings '(control meta))
  
#+end_src

Undo and redo window configurations with ~winner-mode~
#+begin_src emacs-lisp
  
  (winner-mode)
  
#+end_src

| winner-undo | C-c left  |
| winner-redo | C-c right |

* Tabs

Enable tab bar with ~tab-bar-mode~
Commands at ~C-x t~

| tab-next                   | C-TAB     | Move to next tab          |
| tab-previous               | C-S-TAB   | Move to previous tab      |
| tab-bar-select-tab-by-name | C-x t RET | Select tab by name        |
|                            |           |                           |
| tab-rename                 | C-x t r   | Rename current tab        |
| tab-move                   | C-x t m   | Move current tab to right |
|                            |           | left with negative prefix |
|                            |           |                           |
| tab-new                    | C-x t 2   | Create new tab            |
| switch-to-buffer-other-tab | C-x t b   | Switch to other buffer    |
| dired-other-tab            | C-x t d   | Switch to dired           |
| find-file-other-tab        | C-x t f   | Open file                 |
|                            |           |                           |
| tab-close                  | C-x t 0   | Close current tab         |
| tab-close-other            | C-x t 1   | Close all other tabs      |
| tab-bar-undo-close-tab     |           | Reopen last closed tab    |
|                            |           |                           |

#+begin_src emacs-lisp
  
  (setq tab-bar-new-tab-choice "*scratch*")
  (setq tab-bar-close-button-show nil
        tab-bar-new-button-show nil)
  
#+end_src

* Perspectives

Have seperate workspaces: Each one has its own buffer list and window configuration

#+begin_src emacs-lisp

  (use-package perspective
    :bind (("C-x k" . persp-kill-buffer*) ;; kill buffer only in this perspective
           ("C-x b" . persp-switch-to-buffer*) ;; to only show buffers in current perspective
           ("C-x C-b" . persp-list-buffers)) ;; only show buffers in current perspective
    :custom
    (persp-initial-frame-name "start")
    (persp-mode-prefix-key (kbd "C-x x")) ;; shadows buffer related commands, perhaps better choice: C-z

    :init (persp-mode))

#+end_src

A perspective does not own a buffer, a buffer can be part of several perspectives.

Perspective actions
| C-x x s | persp-switch | open a perspective or create new one            |
| C-x x r | persp-rename | Rename perspective                              |
| C-x x n | persp-next   | switch to next perspective (also with C-x x ->) |
| C-x x p | persp-prev   | switch to previous perspective                  |
| C-x x 1 |              | switch to first perspective (1 - 10)            |
| C-x x c | persp-kill   | kill perspective and all its buffers            |

Buffer actions
| C-x x b   | persp-switch-to-buffer | choose buffer from all perspectives and         |
|           |                        | switch to perspective that owns buffer          |
| C-x x a   | persp-add-buffer       | select buffer to add to current perspective     |
|           |                        | (don't switch to it)                            |
| C-x x A   | persp-set-buffer       | select buffer to move to current perspective    |
|           |                        | (don't switch, remove from all other persps)    |
| C-u C-x b |                        | select buffer to add to current perspective     |
|           |                        | and switch                                      |

| C-x x k   | persp-remove           | remove buffer from perspective                  |
