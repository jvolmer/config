#+TITLE: Setup projects
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/lisp/projects.el

#+begin_src emacs-lisp
  
  (provide 'projects)
  
#+end_src

* Projectile

#+begin_src emacs-lisp
  
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom
    (projectile-completion-system 'ivy)
    (projectile-project-search-path
     '("~/code/projects"
       "~/code/projects/arduino"
       "~/config"))
    ;; after selecting project start dired
    (projectile-switch-project-action #'projectile-dired)
    :bind-keymap ("C-c p" . projectile-command-map))
  
#+end_src

Provide additional actions in ivy with ~M-o~

#+begin_src emacs-lisp
  
  (use-package counsel-projectile
    :after projectile
    :init (counsel-projectile-mode))
  
#+end_src

Commands:
+----------------------------+-----------+----------------------------+
| Command                    | Key       | D2escription               |
+----------------------------+-----------+----------------------------+
| projectile-find-file       | C-c p f   |Find file in project        |
|                            |           |directory                   |
+----------------------------+-----------+----------------------------+
| projectile-switch-project  | C-c p p   |                            |
+----------------------------+-----------+----------------------------+
| projectile-run-project     | C-c p u   |                            |
+----------------------------+-----------+----------------------------+
| projectile-test-project    | C-c p P   |                            |
+----------------------------+-----------+----------------------------+
| projectile-edit-dir-locals | C-c p E   |Create file with variables  |
|                            |           |for this project, e.g. for  |
|                            |           |command for                 |
|                            |           |projectile-run-project. This|
|                            |           |file is then loaded for each|
|                            |           |file in the repo per buffer.|
|                            |           |                            |
|                            |           |                            |
|                            |           |                            |
+----------------------------+-----------+----------------------------+
| counsel-projectile-rg      | C-c p s r |Ripgrep search through all  |
|                            |           |files in the directory      |
+----------------------------+-----------+----------------------------+

* Magit

Open magit 
#+begin_src emacs-lisp
  
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))
  
#+end_src

Call ~magit-status~ with ~C-x g~

In magit
- ~s~ and ~u~ to (un)stage file / hunk / hunk-part (define region for part with C-SPC mark C-SPC)
For direct interaction with github or gitlab, forge can be an interesting package.

  ~magit-clone~ from anywhere
    
** Main panel navigation
| C-n/p | move forward/backward by line             |
| n/p   | move forward/backward by visible section  |
|       | (e.g. go to next hunk)                    |
| M-n/p | move forward/backward by sibling section  |
|       | (e.g. between files/hunks/magit-sections) |
| "^"   | move to parent section                    |
| TAB   | Expand/Collapse                           |
| M-TAB | Cycle through section visibility          |

** State/Unstage
| s/u   | Stage/unstage file/hunk/hunk-part  |
| C-SPS | Mark region (Use before and after) |

** Push/Pull
| P p | Push (new) branch to remote                                  |
| F p | Pull latest changes from remote version of current branch    |
| F u | Pull latest changes from upstream version of current branch  |
| F r | Turn on rebase option for pulling: when pulling, new commits |
|     | will be replayed on to of pulled branch                      |
| f p | Pull remote branch without changing you local one            |

** Others
| ?     | Help                   |
| i ... | Add file to .gitignore |

** Resolve conflicts
*** With Smerge
On conflicting file section
| C-c ^ C-h RET | (while point is on a command name) docu |
| C-c ^ m       | Keep mine (HEAD version)                |
| C-c ^ o       | Keep other                              |
| C-c ^ n       | move to next conflict                   |
| k             | Asks which side to keep                 |

*** With Ediff
How: Press ~e~ with point on conflicting file
| n/p | Navigate through conflicts |
| a/b | Accept a version           |
| "/" | Look at ancestor           |
| q   | Quit                       |
| ?   | Help                       |
