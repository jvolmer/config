#+TITLE: Setup projects
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/lisp/projects.el

#+begin_src emacs-lisp
  
  (provide 'projects)
  
#+end_src

* Projectile

#+begin_src emacs-lisp
  
  (use-package projectile
    :custom
    (projectile-completion-system 'ivy)
    (projectile-project-search-path
     '("~/code/projects/"
       "~/help/"
       "~/config/"))
    ;; after selecting project start dired
    (projectile-switch-project-action #'projectile-dired)
    :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map))
    :init
    (projectile-mode 1))
  
#+end_src

Provide additional actions in ivy with ~M-o~

#+begin_src emacs-lisp
  
  (use-package counsel-projectile
    :after projectile
    :init (counsel-projectile-mode))
  
#+end_src

Commands:
+----------------------------+-----------+----------------------------+
| Command                    | Key       | D2escription               |
+----------------------------+-----------+----------------------------+
| projectile-find-file       | C-c p f   |Find file in project        |
|                            |           |directory                   |
+----------------------------+-----------+----------------------------+
| projectile-switch-project  | C-c p p   |                            |
+----------------------------+-----------+----------------------------+
| projectile-run-project     | C-c p u   |                            |
+----------------------------+-----------+----------------------------+
| projectile-test-project    | C-c p P   |                            |
+----------------------------+-----------+----------------------------+
| projectile-edit-dir-locals | C-c p E   |Create file with variables  |
|                            |           |for this project, e.g. for  |
|                            |           |command for                 |
|                            |           |projectile-run-project. This|
|                            |           |file is then loaded for each|
|                            |           |file in the repo per buffer.|
|                            |           |                            |
|                            |           |                            |
|                            |           |                            |
+----------------------------+-----------+----------------------------+
| counsel-projectile-rg      | C-c p s r |Ripgrep search through all  |
|                            |           |files in the directory      |
+----------------------------+-----------+----------------------------+

* Magit

Open magit 
#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status
    :bind ("C-c g" . magit-file-dispatch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
    (magit-bury-buffer-function 'magit-restore-window-configuration)
  )

#+end_src

Call ~magit-status~ with ~C-x g~

In magit
- ~s~ and ~u~ to (un)stage file / hunk / hunk-part (define region for part with C-SPC mark C-SPC)
For direct interaction with github or gitlab, forge can be an interesting package.

  ~magit-clone~ from anywhere
    
** Main panel navigation
| TAB   | Expand/Collapse                  |
| M-TAB | Cycle through section visibility |
Through all visible hierachies:
| C-j | beginning of next section |
| C-k | beginning of section      |
Consider one hierachy level:
| gj / M-n | beginning of next sibling section (e.g. file) |
| gk / M-p | beginning of prev sibling section             |
| "^"      | beginning of parent section                   |

** State/Unstage
| s/u   | Stage/unstage file/hunk/hunk-part  |
| C-SPS | Mark region (Use before and after) |

** Push/Pull
| P p | Push (new) branch to remote                                  |
| F p | Pull latest changes from remote version of current branch    |
| F u | Pull latest changes from upstream version of current branch  |
| F r | Turn on rebase option for pulling: when pulling, new commits |
|     | will be replayed on to of pulled branch                      |
| f p | Pull remote branch without changing you local one            |

** Others
| ?     | Help                   |
| i ... | Add file to .gitignore |

** Resolve conflicts
*** With Smerge
On conflicting file section
| C-c ^ C-h RET | (while point is on a command name) docu |
| C-c ^ m       | Keep mine (HEAD version)                |
| C-c ^ o       | Keep other                              |
| C-c ^ n       | move to next conflict                   |
| k             | Asks which side to keep                 |

*** With Ediff
How: Press ~e~ with point on conflicting file
| n/p | Navigate through conflicts |
| a/b | Accept a version           |
| "/" | Look at ancestor           |
| q   | Quit                       |
| ?   | Help                       |

** Actions in a specific file

Menu:
| magit-file-dispatch | C-c g   |

Interesting:
| magit-log-buffer-file | C-c g l   | Show logs of current buffer                    |
| magit-blame-addition  | C-c g b   | Opens new buffer: Show blame of each line      |
|                       |           | RET for commit infos, ESC to go back to buffer |
| magit-diff-range      | C-c g D r | Compare buffer to another branch / commit      |

* Code review

Need a Github API token in ~/.authinfo.gpg for that
#+begin_src emacs-lisp
  
  (use-package forge
    :after magit)
  
  (use-package code-review
    :hook (code-review-mode . emojify-mode)
    :custom 
    (code-review-fill-column 80)
    (code-review-new-buffer-window-strategy #'switch-to-buffer)
    (code-review-download-dir "/tmp/code-review/")
    (code-review-auth-login-marker 'forge))

#+end_src

* Jira

Need a Jira API token in ~/.authinfo.gpg for that
#+begin_src emacs-lisp

  (use-package org-jira
    :custom
    (jiralib-url "https://arangodb.atlassian.net")
    (org-jira-working-dir "~/docs/organization/jira/")
    (org-jira-boards-default-limit 500)
    (org-jira-custom-jqls '(
      (:jql " project = PREG and parent = PREG-53 order by created DESC "
        :filename "udf")))
    (org-jira-progress-issue-flow '(("Backlog" . "To Do") ("To Do" . "In Progress") ("In Progress" . "Review") ("Review" . "Done")))
    (org-jira-jira-status-to-org-keyword-alist '(("Backlog" . "BACKLOG") ("To Do" . "TODO") ("In Progress" . "IN PROGRESS") ("Review" . "REVIEW") ("Done" . "DONE") ("OnHold" . "ONHOLD"))))

#+end_src

* Ripgrep

#+begin_src emacs-lisp

  (use-package rg
    :bind ("C-c s" . rg-menu)
    :config (rg-enable-menu))

  (define-key isearch-mode-map "\M-sr" 'rg-isearch-menu)

#+end_src

Menu entry: ~C-c s~
| C-c s r | Search for regex: regex, file type, directory |
| C-c s t | same but for literals xoinstead of regex      |
| C-c s p | Search in full project                        |

Inside search buffer
| i | Make search results editable via wgrep (abort C-c C-k, done C-c C-c) |
| s | Save rg-buffer to unique new name (C-c s s from outside buffer)      |
