#+TITLE: Define completion packages
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/lisp/completion.el
#+PROPERTY: header-args :mkdirp yes

#+begin_src emacs-lisp
  
  (provide 'completion)
  
#+end_src

* Completion UI

#+begin_src emacs-lisp

   (defun me/minibuffer-backward-kill (arg)
    "Delete parent folder when completion is a directory.

  ARG is the thing being completed in the minibuffer."
    (interactive "p")
    (if minibuffer-completing-file-name
        (if (string-match-p "/$" (minibuffer-contents))
            (zap-up-to-char (- arg) ?/) 
            (kill-backward-chars arg))
      (kill-backward-chars arg)))

  (use-package vertico
    :init (vertico-mode)
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
            :map minibuffer-local-map
                ("<backspace>" . me/minibuffer-backward-kill)) 
    :custom (vertico-cycle t))
  
  (vertico-multiform-mode)
  ;; Configure display per completion category (available alternative: per command)
  (setq vertico-multiform-categories
    ;; use indexed buffer for consult grep commands
    '((consult-grep buffer indexed)))
  
#+end_src

Todo: How to define a command and a keybinding for a specific cateogy, something like:
  ;;          :map counsel-find-file-map
  ;;          ("C-H" . (lambda() (interactive) (ivy--cd "~/"))))) ;; to directly open home

* Annotations / Metainformation 

#+begin_src emacs-lisp

  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

#+end_src

* Search and navigation commands

#+begin_src emacs-lisp
  
  (use-package consult
    :bind (("C-s" . consult-line)
           :map minibuffer-local-map
           ("C-r" . consult-history)))
  
#+end_src

In buffer completions with vertico:
(setq completion-in-region-function #'consult-completion-in-region)
Possibly set ~consult-ripgrep~ to a keybinding
Possibly set ~consult-project-root-function~ to ~projectile-project-root~

~consult-find~ to find files with a specific name

* Completion style

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless))
    (completion-category-overrides '((file (styles . (partial-completion))))))
  
#+end_src

* Sorting

#+begin_src emacs-lisp

  (use-package savehist
    :ensure nil
    :init
    (savehist-mode))

#+end_src
 
* Context menu

Context specific ations on current target (cycle through targets with embark-act when several targets are present at location)
#+begin_src emacs-lisp
  
  (use-package embark
    :ensure t
    :bind
    ("C-." . embark-act)
    ("M-." . embark-dwim)
    ;; ("C-h B" . embark-bindings)) ;; alternative for describe-bindings
    ;; TODO get rid of which-key, use better names for keybinded fcts ;;      then do next line instead of previous
    ([remap describe-bindings] . embark-bindings)
    :init
    (setq prefix-help-command #'embark-prefix-help-command))
  
#+end_src

** Keybinding help
When setting ~prefix-help-command~ to ~embark-prefix-help-command~ (and switch off which-key) you can press a prefix, e.g. ~C-x~, and then ~C-h~ to get all options in a minibuffer (searchable now) including nested keybindings - use @ to search for key instead of name

Make sure that this also works for help (~C-h C-h~ is per default bound to ~help-for-help~ command)
#+begin_src emacs-lisp
  (define-key global-map (kbd "C-h C-h") nil)
#+end_src

** Context action menu
- In ~embark-act~, use ~C-h~ to show all actions.
- In ~embark-act~, use any command to run on target, e.g. ~M-x~ or ~C-x b~
- Pressing ~C-u~ before ~embark-act~ leaves minibuffer open after action, therefore you can do multiple actions
- You can replace the current action defining command with embark: E.g. ~C-x k~, then ~embark-act~, then ~C-x b~ to change to buffer instead of killing it
- There are different key maps for types of targets, e.g. ~embark-file-map~, ~embark-buffer-map~

** Quick actions
Execute a default action specific to a target: ~embark-dwin~ (do what I mean)

** Change current minibuffer command
After ~embark-act~ do ~B~ and then choose the minibuffer action type: e.g. initially you were in change buffer (~C-x b~) and now you want to create that file, so press ~C-x C-f~.  You can also directly bind ~embark-become~ which would combine ~embark-act~ and ~B~

** Gather completions
- Export minibuffer to an apropriate buffer: ~embark-act E~. Another option is collect.

  #+begin_src emacs-lisp
    
    (use-package embark-consult
      :after (embark consult))
    
  #+end_src
* Ivy

In an  list provided by ivy, ~ivy-dispatching-done~ (~M-o~) gives all available actions for one entry.

Put current list in a new buffer with ~ivy-occur~ (~C-c C-o~). Here, use ~o~ for actions, ~q~ to close.

Don't use one of the ivy options but my own: ~ivy-immediate-done~ (~C-M-j~)
