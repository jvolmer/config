#+TITLE: Define completion packages
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/lisp/completion.el
#+PROPERTY: header-args :mkdirp yes

#+begin_src emacs-lisp
  
  (provide 'completion)
  
#+end_src

* Completion UI

#+begin_src emacs-lisp

   (defun me/minibuffer-backward-kill (arg)
    "Delete parent folder when completion is a directory.

  ARG is the thing being completed in the minibuffer."
    (interactive "p")
    (if minibuffer-completing-file-name
        (if (string-match-p "/$" (minibuffer-contents))
            (zap-up-to-char (- arg) ?/) 
            (kill-backward-chars arg))
      (kill-backward-chars arg)))

  (use-package vertico
    :init (vertico-mode)
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
            :map minibuffer-local-map
                ("<backspace>" . me/minibuffer-backward-kill)) 
    :custom (vertico-cycle t))
  
  (vertico-multiform-mode)
  ;; Configure display per completion category (available alternative: per command)
  (setq vertico-multiform-categories
    ;; use indexed buffer for consult grep commands
    '((consult-grep buffer indexed)))
  
#+end_src

Todo: How to define a command and a keybinding for a specific cateogy, something like:
  ;;          :map counsel-find-file-map
  ;;          ("C-H" . (lambda() (interactive) (ivy--cd "~/"))))) ;; to directly open home

* Annotations / Metainformation 

#+begin_src emacs-lisp

  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

#+end_src

* Search and navigation commands

Config is copied from example setion of github readme
#+begin_src emacs-lisp
  
  (use-package consult
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flycheck)               ;; Alternative: consult-flymake
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)                  ;; Alternative: consult-fd
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element
;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
)
  
#+end_src

In buffer completions with vertico:
(setq completion-in-region-function #'consult-completion-in-region)
Possibly set ~consult-ripgrep~ to a keybinding
Possibly set ~consult-project-root-function~ to ~projectile-project-root~

~consult-find~ to find files with a specific name

* Completion style

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless))
    (completion-category-overrides '((file (styles . (partial-completion))))))
  
#+end_src

* Sorting

#+begin_src emacs-lisp

  (use-package savehist
    :ensure nil
    :init
    (savehist-mode))

#+end_src
 
* Context menu

Context specific ations on current target (cycle through targets with embark-act when several targets are present at location)
#+begin_src emacs-lisp
  
  (use-package embark
    :ensure t
    :bind
    ("C-." . embark-act)
    ("M-." . embark-dwim)
    ;; ("C-h B" . embark-bindings)) ;; alternative for describe-bindings
    ;; TODO get rid of which-key, use better names for keybinded fcts ;;      then do next line instead of previous
    ([remap describe-bindings] . embark-bindings)
    :init
    (setq prefix-help-command #'embark-prefix-help-command))
  
#+end_src

** Keybinding help
When setting ~prefix-help-command~ to ~embark-prefix-help-command~ (and switch off which-key) you can press a prefix, e.g. ~C-x~, and then ~C-h~ to get all options in a minibuffer (searchable now) including nested keybindings - use @ to search for key instead of name

Make sure that this also works for help (~C-h C-h~ is per default bound to ~help-for-help~ command)
#+begin_src emacs-lisp
  (define-key global-map (kbd "C-h C-h") nil)
#+end_src

** Context action menu
- In ~embark-act~, use ~C-h~ to show all actions.
- In ~embark-act~, use any command to run on target, e.g. ~M-x~ or ~C-x b~
- Pressing ~C-u~ before ~embark-act~ leaves minibuffer open after action, therefore you can do multiple actions
- You can replace the current action defining command with embark: E.g. ~C-x k~, then ~embark-act~, then ~C-x b~ to change to buffer instead of killing it
- There are different key maps for types of targets, e.g. ~embark-file-map~, ~embark-buffer-map~

Make sure that =embark-act= works everywhere
#+begin_src emacs-lisp
  (define-key evil-normal-state-map (kbd "C-.") nil)
#+end_src

** Quick actions
Execute a default action specific to a target: ~embark-dwin~ (do what I mean)

** Change current minibuffer command
After ~embark-act~ do ~B~ and then choose the minibuffer action type: e.g. initially you were in change buffer (~C-x b~) and now you want to create that file, so press ~C-x C-f~.  You can also directly bind ~embark-become~ which would combine ~embark-act~ and ~B~

** Gather completions
- Export minibuffer to an apropriate buffer: ~embark-act E~. Another option is collect.
