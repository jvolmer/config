#+TITLE: Emacs Lisp

Lisp syntax is primarily composed of lists, symbols and values.

* Basics

Interactive Emacs Lisp REPL: ~ielm~
Get type of something with ~type-of~

** Evaluation

Form: Any lisp object that can be evaluated
How: Inside expression ~C-M-x~ or go to end of expression and ~C-x C-e~ or for any command ~M-:~ and then command
Integer result gives you different representations: decimal (octal hexa character)

Completion: ~completion-at-point~ ~C-M-i~

*** Self-evaluating
Primitive data types

#+begin_src emacs-lisp
  
  42
  
  "Hello"
  
  [1 2 (+ 1 2)]
  
#+end_src

*** Evaluating to some value
Lists, variables and functions (Symbols)

#+begin_src emacs-lisp
  
  buffer-file-name
  
  (+ 300 11)
  
#+end_src

Make them self-evaluating with adding ' beforehand

When evaluating lists, it always expects a function as first argument, the rest are the inputs to this function

*** No evalation possible
E.g. some results of other evaluations

#+begin_src emacs-lisp
  
  #<buffer *scratch*>
  
#+end_src

** Symbols

Evaluate to something different than themselves
Can contain alphanumeric characters plus many more ~- + = *  / _ ~ ! @ $ % ^ & : < > { } ?~
There are separate namespaces for variables and functions, therefore you can have the same name for a variable and a function
Make symbol out of expression by putting ' before it: Then the expression will not be evaluated, e.g. ~'(1 2 3)~ is just a list, no function, or ~'some-function~ is the name of a function, which is not evaluated at that point

* Types

** Boolean
True and false are symbols
#+begin_src emacs-lisp
  
  (type-of t)   ;; symbol
  (type-of nil) ;; symbol
  
#+end_src

** Numbers

- ~eq~ Are the two parameters the same object?
- ~eql~ Are the two parameters same object or same number?
- ~equal~ Are the two parameters equivalent?

  #+begin_src emacs-lisp
    
        (setq test-val '(1 2 3))
    
    (eq 1 1)                  ;; t
    (eq 3.1 3.1)              ;; nil
    (eq "thing" "thing")      ;; nil
    (eq '(1 2 3) '(1 2 3))    ;; nil
    (eq test-val test-val)    ;; t
    
    (eql 1 1)                 ;; t
    (eql 3.1 3.1)             ;; t
    (eql "thing" "thing")     ;; nil
    (eql '(1 2 3) '(1 2 3))   ;; nil
    (eql test-val test-val)   ;; t
    
    (equal 1 1)               ;; t
    (equal 3.1 3.1)           ;; t
    (equal "thing" "thing")   ;; t
    (equal '(1 2 3) '(1 2 3)) ;; t
    (equal test-val test-val) ;; t
    
    ;; Attention
    (equal 1.0 1.)            ;; nil (1. is integer but 1.0 is float)
    
  #+end_src

  1. != 1.0

~+ - * / % mod 1+ 1-~
~truncate round floor ceiling~
~integerp floatp numberp zerop~
~= < > <= >= max min~ (can be applied to more than 2 parameters)

** Characters
Characters are really just integers that are interpreted as characters
#+begin_src emacs-lisp
  
  ;; ASCII
  ?A ;; 65
  ?a ;; 97
  ?\n ;; 10
  ?\t ;; 9
  
  ;; Unicode
  ?\N{U+E0}    ;; 224
  ?\u00e0      ;; 224
  ?\U000000E0  ;; 224
  ?\N{LATIN SMALL LETTER A WITH GRAVE} ;; 224
  
  ;; Control and meta char syntax
  ?\C-c        ;; 3
  (kbd "C-c")  ;; "^C"
  ?\M-x        ;; 134217848
  (kbd "M-x")  ;; [134217848]
  
#+end_src

*** Comparisons
#+begin_src emacs-lisp
  
  (char-equal ?A ?A)
  (char-equal ?A 65)
  (char-equal ?A ?a)
  
  case-fold-search
  (setq case-fold-search nil)
  (setq case-fold-search t)
  
#+end_src

** Sequences
Strings, lists and arrays (check with ~sequencep~)
~length~ - get length
~elt <sequence> <index>~ - get element at index (for lists you can get -1 element)

~nil~ is considered an empty list

*** Strings
Strings are arrays of charachters
#+begin_src emacs-lisp
  
  (make-string 5 ?!) ;; !!!!
  (string ?H ?e ?l ?l ?o ?!) ;; "Hello!"
  
#+end_src

Predicates: ~stringp string-or-null-p char-or-string-p~
Comparisons: ~string= string< string>~
Operations: ~substring, concat, split-string~

Split by whitespace or ! but don't show empty strings
#+begin_src emacs-lisp
  
  (split-string "Hello System Crafters!" "[ !]" t)
  
#+end_src

Formatting

#+begin_src emacs-lisp
  
  (format "Hello %d %s!" 100 "System Crafters")
  (message "This is %d" 5)
  
#+end_src

*** Lists
Lists are build out of "cons cells" - pair of values
#+begin_src emacs-lisp
  
  (cons 1 2)     ;; '(1 . 2)
  (car '(1 . 2)) ;; 1
  (cdr '(1 . 2)) ;; 2
  
#+end_src
~setcar~, ~setcdr~

List is chain of cons
#+begin_src emacs-lisp
  
  (cons 1 (cons 2 (cons 3 (cons 4 nil)))) ;; (1 2 3 4)
  (cons 1 '(2 3 4)) ;; (1 2 3 4)
  (append '(1 2 3) '(4))
  
#+end_src

~(list 1 2 3)~ creates a list (equivalent to ~'(1 2 3)~
~(car <list>)~ Get first argument

**** Alist
Key-Value pairs
#+begin_src emacs-lisp
  
  (setq some-alist '((one . 1)
                     (two . 2)
                     (three . 3)))
  
  (alist-get 'one   some-alist)  ;; 1
  (assq 'one   some-alist)  ;; '(one . 1)
  (rassq 1     some-alist)  ;; '(one . 1)
  
#+end_src

No function to change them directly

**** Plist
Key-Value pairs in a flat list

#+begin_src emacs-lisp
  
  (plist-get '(one 1 two 2) 'one) ;; 1
  (plist-put '(one 1 two 2) 'three 3)
  
#+end_src

*** Arrays
Sequences of values that are arranged continously in memory
#+begin_src emacs-lisp
  
  (setq array [1 2 3 4])
  (aset array 1 5)
  
#+end_src
Strings are arrays

* Conditions
When evaluating expressions, everything except the value ~nil~ and the empty list ~'()~ is true
*** Operators
- ~not~ - inverts truth value of argument
- ~and~ - returns last value if expressions are truthy
- ~or~ - returns the first value that is truthy (others after that will not be evaluated - short circuit)
- ~xor~ - returns the first value that is truthy (doesn't shor-circuit)

*** If-expression

True branch is a single expression, false branch can be multiple expressions (can use ~progn~ for several expressions in true branch)
Returns the value of the last form evaluated

#+begin_src emacs-lisp
  
  (if nil 5
    ;; You can add an arbitrary number of forms in the "false" branch
    (message "Doing some extra stuff here")
    (+ 2 2))
  ;; 4
  
#+end_src

*** When and unless
~when~ - Evaluate following forms when expression evaluates to ~t~
~unless~ - Evaluate following forms when expression evaluates to ~nil~

*** Cond expression
Switch-case / match

* Loops
~while~, ~dotimes (count <N>)~, ~dolist (item '("one" "two"))~

* Functions

#+begin_src emacs-lisp
  
  (defun do-some-math (x y)
    "Multiplies the result of math expressions on the arguments X and Y."
    (* (+ x 20)
       (- y 10)))
  
  (do-some-math 100 50)
  
#+end_src

You can define last parameters as optional, e.g. ~(defun multiply-maybe (x &optional y z) ...)~, null if not set
You can define rest variable, e.g. ~(defun multiply-many (x &rest operands) ...)~ and then loop over operands
Docstring: example ~alist-get~ function
Anonymous function: ~(lambda (x y) (+ x y))~

** Invoking
Equivalent:
#+begin_src emacs-lisp
  
  (+ 2 2)
  (funcall '+ 2 2)
  (apply '+ '(2 2))
  
#+end_src

** Commands
Interactive functions are called command, are meant to be used directly by the user
They provide a few benefits over normal functions

- They show up in M-x command list
- Can be used in key bindings
- Can have parameters sent via prefix arguments, C-u

  #+begin_src emacs-lisp
    
    (defun my-first-command ()
      (interactive)
      (message "Hey, it worked!"))
    
  #+end_src

If the command needs parameters, you have to define them in after interactive, such that they are requested.
  #+begin_src emacs-lisp
    
    (defun do-some-math (x y)
      "Multiplies the result of math expressions on the arguments X and Y."
      (interactive "Nx: \nNy: ")
      (message "The result is: %d"
               (* (+ x 20)
                  (- y 10))))
    
  #+end_src
See which types (N stands here for a numeric parameter) are available at https://www.gnu.org/software/emacs/manual/html_node/elisp/Interactive-Codes.html#Interactive-Codes

* Variables
A variable is an association (binding) between a name (more specifically a symbol) and a value.

Equivalent:
#+begin_src emacs-lisp
  
  (setq tab-width 4)
  (set 'tab-width 4) ;; set is a symbol
  
#+end_src

You can also define several variables with setq: ~(setq a 1 b 2)~

Define a variable with documentation (mostly for configuration and package documentation)
#+begin_src emacs-lisp
  
  (defvar am-i-documented "yes"
  "I will relieve my own concern by documenting myself")
  
#+end_src
defvar only applies the default value if the binding doesn’t already exist, can be overwritten by evaluating function with ~eval-defun~

** Buffer local variables

~(setq-local tab-width 4)~

If you set in same buffer ~tab-width~ later, you will only change the local value

If you are writing an Emacs Lisp package and want to provide a buffer-local variable, this is the way to do it!
#+begin_src emacs-lisp
  
  (defvar new-buffer-local-var 311)
  (make-variable-buffer-local 'new-buffer-local-var)  
  
#+end_src
Makes the variable local for all future buffers

Set a default value for all buffer that have not define the variable locally yet: ~(setq-default not-local-yet nil)~ (Be aware of unexpected results when setting the default to a local variable)

** Variable scope
Most variables in the config are defined in the “global” scope, meaning that they are visible to any other code loaded in Emacs. A buffer-local variable can be thought of as a global variable for a particular buffer.

*** Local scope
~(let ((x 0)) ... )~, also with more variables ~(let ((y 5) (z 10)) ... )~
let* allows you to use previous variables you’ve bound in subsequent binding expressions:
#+begin_src emacs-lisp
  
  (let* ((y 5)
         (z (+ y 5)))
    (* y z))
  
#+end_src
Because it is expanded to two nested let's.

interesting: ~if-let~ and ~when-let~

*** Dynamic scope

value that is associated with a variable may change depending on where an expression gets evaluated

is mostly used in emacs (other scoping model in Emacs is called “lexical scoping”)

#+begin_src emacs-lisp
  
  (setq x 5)
  
  ;; x is considered a "free" variable
  (defun do-some-math (y)
    (+ x y))
  
  (do-some-math 10)     ;; 15
  
  (let ((x 15))
    (do-some-math 10))  ;; 25
  
#+end_src

** Customization variables

show up in the customization UI (users can set them without code)

*** Definition
#+begin_src emacs-lisp
  
  (defcustom my-custom-variable 42
  "A variable that you can customize")
  
#+end_src
Can also define additional parameters, e.g. ~:type~, ~:group~ or ~:options~

*** Setting
With ~(customize-set-variable 'tab-width 2)~ or ~(use-package emacs :custom (tab-width 2))~

You can check with ~(custom-variable-p 'tab-width)~ whether variable is customizable
